{"version":3,"sources":["components/WordsRow.tsx","components/Timer.tsx","helpers/shuffleWords.ts","components/TypeBar.tsx","components/Alert.tsx","App.tsx","index.tsx"],"names":["WordsRow","currentColor","currentIndex","words","top","setCurrentElem","setTop","elementsRefs","useRef","useEffect","elem","current","prevElem","previousElementSibling","offsetTop","prev","className","style","map","ch","i","ref","el","push","classNames","undefined","getAttribute","formatTime","timer","minutes","Math","floor","seconds","slice","Timer","startTimer","setValue","setShowAlert","useState","setTimer","interval","setInterval","clearInterval","setTimeout","shuffleWords","arr","sort","random","TypeBar","currentElem","showAlert","setCurrentIndex","setCurrentColor","setCorrectCounter","setWords","value","setStartTimer","readOnly","onChange","e","target","word","input","length","validateString","setAttribute","type","onClick","parentNode","childNodes","forEach","removeAttribute","Alert","correctCounter","WORDS","App","ReactDOM","render","document","getElementById"],"mappings":"0MAiDeA,EApCE,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,aAAcC,EAA+D,EAA/DA,aAAcC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,OAElEC,EAAeC,iBAAsB,IAc3C,OAXAC,qBAAU,WACN,IAAMC,EAA2BH,EAAaI,QAAQT,GACtDG,EAAeK,GACf,IAAME,EAA2B,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAMG,uBACtCH,GAAQE,GACJF,EAAKI,UAAYF,EAASE,WAC1BR,GAAO,SAAAS,GAAI,OAAIA,EAAO,QAG/B,CAACb,IAGA,qBAAKc,UAAU,QAAf,SACI,qBAAKC,MAAO,CAAEb,IAAKA,EAAM,MAAQY,UAAU,aAA3C,SAEQb,EAAMe,KAAI,SAACC,EAAYC,GAAb,OAA2B,sBACjCC,IAAK,SAACC,GAAD,OAAQA,GAAMf,EAAaI,QAAQY,KAAKD,IAC7CN,UAAWQ,IACPJ,IAAMlB,EAAN,qBAAmCD,QAAiBwB,EACpDlB,EAAaI,QAAQS,IAAMb,EAAaI,QAAQS,GAAGM,aAAa,WAChEnB,EAAaI,QAAQS,IAAMb,EAAaI,QAAQS,GAAGM,aAAa,cALnC,SAQhCP,GADIC,EAAID,WChC3BQ,EAAa,SAACC,GAChB,IAAMC,EAAUC,KAAKC,MAAMH,EAAQ,IAC7BI,EAAU,WAAIJ,EAAQ,IAAKK,OAAO,GACxC,MAAM,GAAN,OAAUJ,EAAV,YAAqBG,IAqCVE,EAlCD,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,aAA2B,EACpCC,mBAAiB,IADmB,mBACvDV,EADuD,KAChDW,EADgD,KAE1DC,EAAwChC,iBAAO,MAwBnD,OAtBAC,qBAAU,WACF0B,EACAK,EAAS7B,QAAU8B,aAAY,WAC3BF,GAAS,SAACxB,GAAD,OAAkBA,EAAO,OACnC,MAGH2B,cAAcF,EAAS7B,SACvB4B,EAAS,IACTH,EAAS,OAEd,CAACD,IAEU,IAAVP,IACAc,cAAcF,EAAS7B,SACvBgC,YAAW,WACPJ,EAAS,IACTF,GAAa,KACd,MAKH,qBAAKrB,UAAU,kBAAf,SACKW,EAAWC,MC1CXgB,EAAe,SAACC,GACzB,OAAOA,EAAIC,MAAK,kBAAMhB,KAAKiB,SAAW,OCkF3BC,EApDC,SAAC,GAAkJ,IAAhJ7C,EAA+I,EAA/IA,MAAO8C,EAAwI,EAAxIA,YAAa/C,EAA2H,EAA3HA,aAAcgD,EAA6G,EAA7GA,UAAWC,EAAkG,EAAlGA,gBAAiBC,EAAiF,EAAjFA,gBAAiBC,EAAgE,EAAhEA,kBAAmB/C,EAA6C,EAA7CA,OAAQ+B,EAAqC,EAArCA,aAAciB,EAAuB,EAAvBA,SAAuB,EACpIhB,mBAAiB,IADmH,mBACvJiB,EADuJ,KAChJnB,EADgJ,OAE1HE,oBAAkB,GAFwG,mBAEvJH,EAFuJ,KAE3IqB,EAF2I,KAuC9J,OACI,sBAAKxC,UAAU,WAAf,UACI,uBAAOyC,WAAUP,EAA0BQ,SAAU,SAACC,GAAD,OArC5C,SAACA,GACd,IAAMJ,EAAQI,EAAEC,OAAOL,MACvBnB,EAASmB,GACTC,GAAc,GAlBC,SAACK,EAAcC,EAAeb,EAAiCG,GAClFA,EAAgB,WAChB,IAAK,IAAIhC,EAAI,EAAGA,EAAI0C,EAAMC,OAAQ3C,IAC1B6B,GACKY,EAAKzC,KAAO0C,EAAM1C,IACnBgC,EAAgB,uBAcxBY,CAAe7D,EAAMD,GAAeqD,EAAON,EAAaG,GACxB,MAA5BG,EAAMA,EAAMQ,OAAS,KACjBd,IACIM,EAAMtB,MAAM,GAAI,KAAO9B,EAAMD,IAC7B+C,EAAYgB,aAAa,UAAW,WACpCZ,GAAkB,SAACtC,GAAD,OAAkBA,EAAO,MAG3CkC,EAAYgB,aAAa,YAAa,cAG9Cd,EAAgBjD,EAAe,GAC/BkD,EAAgB,WAChBhB,EAAS,KAoBmDsB,CAASC,IAAIJ,MAAOA,EAAOvC,UAAU,kBAAkBkD,KAAK,SACxH,cAAC,EAAD,CACI7B,aAAcA,EACdD,SAAUA,EACVD,WAAYA,IAEhB,wBAAQgC,QAtBC,WAAa,IAAD,EACzBX,GAAc,GACdL,EAAgB,GAChBE,EAAkB,GAClBD,EAAgB,WAChB9C,EAAO,GACP+B,GAAa,GACbiB,EAASV,EAAazC,IACX,OAAX8C,QAAW,IAAXA,GAAA,UAAAA,EAAamB,kBAAb,SAAyBC,WAAWC,SAAQ,SAAChD,GACzCA,EAAGiD,gBAAgB,WACnBjD,EAAGiD,gBAAgB,iBAYQvD,UAAU,mBAArC,SAAwD,+BCxDrDwD,EAfD,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,eAAgBpC,EAA2B,EAA3BA,aAM7B,OACI,sBAAKrB,UAAU,QAAf,UACI,wBAAQmD,QANA,WACZ9B,GAAa,IAKiBrB,UAAU,mBAApC,oBACA,+FACA,qHAA0ByD,EAA1B,gFCPNC,EAAkB,CAAC,eAAM,iCAAS,mDAAY,iCAAS,qBAAO,mDAAY,2BAAQ,qBAAO,6CAAW,uCAAU,eAAM,uCAAU,eAAM,uCAAU,uCAAU,iCAAS,qBAAO,qBAAO,iCAAS,SAAK,iCAAS,qBAAO,qBAAO,2BAAQ,qBAAO,iCAAS,2BAAQ,qBAAO,iCAAS,2BAAQ,2BAAQ,qBAAO,SAAK,iCAAS,qBAAO,uCAAU,uCAAU,qBAAO,uCAAU,2BAAQ,eAAM,mDAAY,iCAAS,eAAM,iCAAS,yDAAa,iCAAS,eAAM,2BAAQ,6CAAW,6CAAW,iCAAS,iCAAS,SAAK,eAAM,2BAAQ,uCAAU,uCAAU,uCAAU,iCAAS,iCAAS,eAAM,SAAK,6CAAW,mDAAY,iCAAS,uCAAU,qBAAO,uCAAU,iCAAS,2BAAQ,iCAAS,uCAAU,qBAAO,uCAAU,iCAAS,iCAAS,iCAAS,qBAAO,iCAAS,qBAAO,SAAK,SAAK,2BAAQ,eAAM,6CAAW,iCAAS,iCAAS,uCAAU,uCAAU,iCAAS,6CAAW,2BAAQ,qBAAO,2BAAQ,qBAAO,qBAAO,6CAAW,uCAAU,iCAAS,2BAAQ,uCAAU,eAAM,iCAAS,qBAAO,qBAAO,uCAAU,iCAAS,iCAAS,iCAAS,6CAAW,iCAAS,uCAAU,eAAM,2BAAQ,mDAAY,eAAM,qBAAO,uCAAU,2BAAQ,iCAAS,eAAM,iCAAS,uCAAU,mDAAY,eAAM,qBAAO,uCAAU,uCAAU,eAAM,iCAAS,iCAAS,qBAAO,2BAAQ,iCAAS,yDAAa,uCAAU,6CAAW,2BAAQ,SAAK,iCAAS,6CAAW,uCAAU,uCAAU,eAAM,2BAAQ,qBAAO,6CAAW,uCAAU,qBAAO,2BAAQ,uCAAU,uCAAU,uCAAU,2BAAQ,iCAAS,qBAAO,eAAM,qBAAO,2BAAQ,qBAAO,2BAAQ,qBAAO,iCAAS,eAAM,iCAAS,2BAAQ,2BAAQ,6CAAW,qBAAO,2BAAQ,SAAK,SAAK,mDAAY,uCAAU,qBAAO,eAAM,iCAAS,2BAAQ,2BAAQ,eAAM,eAAM,2BAAQ,iCAAS,2BAAQ,mDAAY,qBAAO,2BAAQ,2BAAQ,6CAAW,2BAAQ,iCAAS,iCAAS,mDAAY,2BAAQ,iCAAS,eAAM,iCAAS,6CAAW,4BAkDjqDC,MA/Cf,WAAgB,IAAD,EACarC,oBAAmB,kBAAMM,EAAa8B,MADnD,mBACNvE,EADM,KACCmD,EADD,OAEyBhB,mBAA6B,MAFtD,mBAENW,EAFM,KAEO5C,EAFP,OAG2BiC,mBAAiB,GAH5C,mBAGNpC,EAHM,KAGQiD,EAHR,OAI+Bb,mBAAqB,GAJpD,mBAINmC,EAJM,KAIUpB,EAJV,OAK2Bf,mBAAiB,WAL5C,mBAKNrC,EALM,KAKQmD,EALR,OAMSd,mBAAiB,GAN1B,mBAMNlC,EANM,KAMDE,EANC,OAOqBgC,oBAAkB,GAPvC,mBAONY,EAPM,KAOKb,EAPL,KAWb,OACE,sBAAKrB,UAAU,MAAf,UAEIkC,GACA,cAAC,EAAD,CACEb,aAAcA,EACdoC,eAAgBA,IAKpB,cAAC,EAAD,CACEpE,eAAgBA,EAChBC,OAAQA,EACRF,IAAKA,EACLH,aAAcA,EACdE,MAAOA,EACPD,aAAcA,IAEhB,cAAC,EAAD,CACEmD,kBAAmBA,EACnBD,gBAAiBA,EACjBD,gBAAiBA,EACjBd,aAAcA,EACd/B,OAAQA,EACRgD,SAAUA,EACVJ,UAAWA,EACX/C,MAAOA,EACP8C,YAAaA,EACb/C,aAAcA,QChDtB0E,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.75dffd2e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport classNames from 'classnames';\r\n\r\ninterface IProps {\r\n    currentIndex: number;\r\n    words: string[];\r\n    currentColor: string;\r\n    top: number;\r\n    setTop(param: number | ((param: number) => {})): void\r\n    setCurrentElem(param: HTMLElement | null): void;\r\n\r\n}\r\n\r\nconst WordsRow = ({ currentColor, currentIndex, words, top, setCurrentElem, setTop }: IProps) => {\r\n\r\n    const elementsRefs = useRef<HTMLElement[]>([]);\r\n\r\n\r\n    useEffect(() => {\r\n        const elem: HTMLElement | null = elementsRefs.current[currentIndex];\r\n        setCurrentElem(elem);\r\n        const prevElem: HTMLElement | any = elem?.previousElementSibling;\r\n        if (elem && prevElem) {\r\n            if (elem.offsetTop > prevElem.offsetTop) {\r\n                setTop(prev => prev - 48);\r\n            }\r\n        }\r\n    }, [currentIndex])\r\n\r\n    return (\r\n        <div className='words'>\r\n            <div style={{ top: top + 'px' }} className='words__row'>\r\n                {\r\n                    words.map((ch: string, i: number) => <span\r\n                        ref={(el) => el && elementsRefs.current.push(el)}\r\n                        className={classNames(\r\n                            i === currentIndex ? `words__row-${currentColor}` : undefined,\r\n                            elementsRefs.current[i] && elementsRefs.current[i].getAttribute('correct'),\r\n                            elementsRefs.current[i] && elementsRefs.current[i].getAttribute('incorrect')\r\n                        )}\r\n                        key={i + ch}>\r\n                        {ch}\r\n                    </span>)\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default WordsRow\r\n","import React, { useState, useEffect, useRef } from 'react'\r\n\r\ninterface IProps {\r\n    startTimer: boolean\r\n    setValue(param: string): void\r\n    setShowAlert(param: boolean): void\r\n}\r\n\r\nconst formatTime = (timer: number) => {\r\n    const minutes = Math.floor(timer / 60)\r\n    const seconds = `0${timer % 60}`.slice(-2)\r\n    return `${minutes}:${seconds}`\r\n}\r\n\r\nconst Timer = ({ startTimer, setValue, setShowAlert }: IProps) => {\r\n    const [timer, setTimer] = useState<number>(60);\r\n    let interval: React.MutableRefObject<any> = useRef(null)\r\n\r\n    useEffect(() => {\r\n        if (startTimer) {\r\n            interval.current = setInterval(() => {\r\n                setTimer((prev: number) => prev - 1);\r\n            }, 1000)\r\n        }\r\n        else {\r\n            clearInterval(interval.current)\r\n            setTimer(60)\r\n            setValue('')\r\n        }\r\n    }, [startTimer])\r\n\r\n    if (timer === 0) {\r\n        clearInterval(interval.current);\r\n        setTimeout(() => {\r\n            setTimer(60);\r\n            setShowAlert(true);\r\n        }, 1000)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='type-bar__timer'>\r\n            {formatTime(timer)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","export const shuffleWords = (arr: string[]): string[] => {\r\n    return arr.sort(() => Math.random() - 0.5)\r\n}","import React, { useState } from 'react';\r\n//components\r\nimport Timer from './Timer';\r\n//components\r\n\r\nimport { shuffleWords } from '../helpers/shuffleWords'\r\n\r\ninterface IProps {\r\n    currentElem: HTMLElement | null;\r\n    currentIndex: number;\r\n    words: string[];\r\n    showAlert: boolean;\r\n    setCurrentIndex(param: number): void;\r\n    setCurrentColor(param: string): void;\r\n    setCorrectCounter(param: number | ((param: number) => {})): void;\r\n    setShowAlert(param: boolean): void;\r\n    setTop(param: number): void;\r\n    setWords(param: string[]): void;\r\n}\r\n\r\nconst validateString = (word: string, input: string, currentElem: HTMLElement | null, setCurrentColor: any): void => {\r\n    setCurrentColor('current');\r\n    for (let i = 0; i < input.length; i++) {\r\n        if (currentElem) {\r\n            if ((word[i] !== input[i])) {\r\n                setCurrentColor('incorrectBackground');\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst TypeBar = ({ words, currentElem, currentIndex, showAlert, setCurrentIndex, setCurrentColor, setCorrectCounter, setTop, setShowAlert, setWords }: IProps) => {\r\n    const [value, setValue] = useState<string>('');\r\n    const [startTimer, setStartTimer] = useState<boolean>(false);\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const value = e.target.value;;\r\n        setValue(value);\r\n        setStartTimer(true);\r\n        validateString(words[currentIndex], value, currentElem, setCurrentColor);\r\n        if (value[value.length - 1] === ' ') {\r\n            if (currentElem) {\r\n                if (value.slice(0, -1) === words[currentIndex]) {\r\n                    currentElem.setAttribute('correct', 'correct');\r\n                    setCorrectCounter((prev: number) => prev + 1);\r\n                }\r\n                else {\r\n                    currentElem.setAttribute('incorrect', 'incorrect');\r\n                }\r\n            }\r\n            setCurrentIndex(currentIndex + 1);\r\n            setCurrentColor('current');\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    const onReload = (): void => {\r\n        setStartTimer(false);\r\n        setCurrentIndex(0);\r\n        setCorrectCounter(0);\r\n        setCurrentColor('current');\r\n        setTop(0);\r\n        setShowAlert(false);\r\n        setWords(shuffleWords(words))\r\n        currentElem?.parentNode?.childNodes.forEach((el: any) => {\r\n            el.removeAttribute('correct');\r\n            el.removeAttribute('incorrect');\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='type-bar'>\r\n            <input readOnly={showAlert ? true : false} onChange={(e) => onChange(e)} value={value} className='type-bar__input' type=\"text\" />\r\n            <Timer\r\n                setShowAlert={setShowAlert}\r\n                setValue={setValue}\r\n                startTimer={startTimer}\r\n            />\r\n            <button onClick={onReload} className='type-bar__button'><span></span></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TypeBar\r\n","import React from 'react'\r\n\r\ninterface IProps {\r\n    correctCounter: number\r\n    setShowAlert(param: boolean): void\r\n}\r\n\r\nconst Alert = ({ correctCounter, setShowAlert }: IProps) => {\r\n\r\n    const onClose = () => {\r\n        setShowAlert(false)\r\n    }\r\n\r\n    return (\r\n        <div className='alert'>\r\n            <button onClick={onClose} className='alert__close-btn'>&#10006;</button>\r\n            <h1>{`Время вышло`}</h1>\r\n            <span>{`Ваш результат - ${correctCounter} слов(а)/минуту`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react';\nimport './scss/app.scss';\n//components\nimport WordsRow from './components/WordsRow';\nimport TypeBar from './components/TypeBar';\nimport Alert from './components/Alert';\n//components\n\nimport { shuffleWords } from './helpers/shuffleWords'\n\nconst WORDS: string[] = [\"во\", \"город\", \"конечный\", \"много\", \"тот\", \"спросить\", \"если\", \"там\", \"большой\", \"просто\", \"по\", \"сейчас\", \"уж\", \"случай\", \"страна\", \"сразу\", \"что\", \"так\", \"белый\", \"в\", \"после\", \"уже\", \"нет\", \"жена\", \"тот\", \"такой\", \"хотя\", \"как\", \"город\", \"пока\", \"вода\", \"кто\", \"с\", \"сразу\", \"про\", \"правда\", \"старый\", \"она\", \"машина\", \"твой\", \"но\", \"понимать\", \"стать\", \"ли\", \"белый\", \"несколько\", \"дверь\", \"мы\", \"нога\", \"значить\", \"главный\", \"самый\", \"жизнь\", \"а\", \"ты\", \"дать\", \"всегда\", \"минута\", \"потому\", \"перед\", \"через\", \"со\", \"а\", \"значить\", \"ответить\", \"знать\", \"вопрос\", \"чем\", \"только\", \"голос\", \"если\", \"ничто\", \"только\", \"они\", \"делать\", \"между\", \"голос\", \"более\", \"без\", \"снова\", \"без\", \"к\", \"к\", \"идти\", \"от\", \"увидеть\", \"такой\", \"знать\", \"страна\", \"каждый\", \"опять\", \"должный\", \"пока\", \"тут\", \"куда\", \"она\", \"нет\", \"который\", \"любить\", \"какой\", \"тоже\", \"начало\", \"об\", \"чтобы\", \"наш\", \"чем\", \"хорошо\", \"более\", \"город\", \"время\", \"увидеть\", \"между\", \"работа\", \"он\", \"день\", \"понимать\", \"да\", \"про\", \"любить\", \"есть\", \"ничто\", \"ну\", \"после\", \"старый\", \"подумать\", \"не\", \"над\", \"деньги\", \"работа\", \"со\", \"здесь\", \"можно\", \"где\", \"себя\", \"выйти\", \"оказаться\", \"просто\", \"человек\", \"лишь\", \"с\", \"когда\", \"ребенок\", \"каждый\", \"стоять\", \"на\", \"день\", \"мир\", \"сторона\", \"хорошо\", \"при\", \"сила\", \"хотеть\", \"деньги\", \"каждый\", \"ночь\", \"пойти\", \"без\", \"ли\", \"тут\", \"куда\", \"так\", \"свое\", \"она\", \"ничто\", \"же\", \"иметь\", \"дело\", \"друг\", \"значить\", \"еще\", \"если\", \"с\", \"и\", \"подумать\", \"потому\", \"над\", \"со\", \"опять\", \"глаз\", \"идти\", \"но\", \"бы\", \"жить\", \"много\", \"отец\", \"остаться\", \"кто\", \"отец\", \"отец\", \"хороший\", \"даже\", \"самый\", \"конец\", \"смотреть\", \"вода\", \"вдруг\", \"же\", \"очень\", \"женщина\", \"идти\"];\n\n\nfunction App() {\n  const [words, setWords] = useState<string[]>(() => shuffleWords(WORDS));\n  const [currentElem, setCurrentElem] = useState<HTMLElement | null>(null);\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [correctCounter, setCorrectCounter] = useState<any | null>(0);\n  const [currentColor, setCurrentColor] = useState<string>('current');\n  const [top, setTop] = useState<number>(0)\n  const [showAlert, setShowAlert] = useState<boolean>(false);\n\n\n\n  return (\n    <div className=\"App\">\n      {\n        showAlert &&\n        <Alert\n          setShowAlert={setShowAlert}\n          correctCounter={correctCounter}\n        />\n      }\n\n\n      <WordsRow\n        setCurrentElem={setCurrentElem}\n        setTop={setTop}\n        top={top}\n        currentColor={currentColor}\n        words={words}\n        currentIndex={currentIndex}\n      />\n      <TypeBar\n        setCorrectCounter={setCorrectCounter}\n        setCurrentColor={setCurrentColor}\n        setCurrentIndex={setCurrentIndex}\n        setShowAlert={setShowAlert}\n        setTop={setTop}\n        setWords={setWords}\n        showAlert={showAlert}\n        words={words}\n        currentElem={currentElem}\n        currentIndex={currentIndex}\n      />\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}